{"version":3,"sources":["images/logo.png","components/Header.js","components/Footer.js","screens/ListarRamais.js","screens/CadastroRamal.js","screens/CadastroSetor.js","screens/ListarSetores.js","screens/EditarSetor.js","screens/EditarRamal.js","screens/Login.js","store/actionTypes.js","screens/Logout.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["Header","Navbar","className","to","src","logo","alt","Nav","HeaderAdmin","useState","expanded","setExpanded","Toggle","onClick","NavDropdown","title","id","Item","Divider","Footer","href","target","rel","size","color","ListarRamais","props","pesquisar","event","listaRamais","state","data","cidadeId","filter","ramal","cidade_id","listaPesquisaNome","pessoa","nome","toLowerCase","indexOf","value","listaPesquisaSetor","setor","listaPesquisa","setState","excluirRamal","ramalId","usuario","token","window","confirm","fetch","method","headers","body","JSON","stringify","then","response","json","alert","excluido","dado","catch","err","console","log","isLoading","result","prevProps","prevState","this","match","params","empresa","listaRamaisCidade","tooltipEditar","Tooltip","tooltipExcluir","Spinner","animation","role","variant","FormControl","placeholder","onChange","bind","Table","striped","bordered","hover","responsive","map","dados","index","key","telefone","email","nome_cidade","OverlayTrigger","placement","delay","show","hide","overlay","Button","React","Component","connect","CadastroRamal","salvarRamal","nomePessoa","numeroRamal","numeroTelefone","setorId","acao","ok","Error","statusText","document","getElementsByClassName","style","display","handleChange","name","getElementsByName","children","innerHTML","listaSetores","esconderErro","visibility","esconderSucesso","listaCidades","Form","Group","controlId","Label","Control","type","required","mask","as","cidade","Alert","onClose","dismissible","CadastroSetor","salvarSetor","nomeSetor","excluirSetor","idLocal","EditarSetor","querySelector","localId","EditarRamal","responseCidades","responseRamal","dadosRamal","responseSetores","nome_pessoa","setor_id","Login","logar","senha","autenticado","onLogin","dispatch","payload","Logout","onLogout","PrivateRoute","component","path","withRouter","location","useSelector","ListarSetores","exact","Boolean","hostname","initialState","empresaId","reducer","action","persistConfig","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","ReactDOM","render","loading","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.59937852.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.df907e41.png\";","import React, { useState } from 'react';\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nimport logo from '../images/logo.png';\r\n\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <Navbar className=\"header\">\r\n            <Link to=\"/\" className=\"header-titulo navbar-brand\">\r\n                <img src={logo} className=\"logo\" alt=\"\" />\r\n            </Link>\r\n            <Nav className=\"justify-content-start itens\">\r\n                <Link to=\"/aguai\" className=\"header-itens nav-link\">AGUAÍ</Link>\r\n                <Link to=\"/sao-paulo\" className=\"header-itens nav-link\">SÃO PAULO</Link>\r\n            </Nav>\r\n            <Nav className=\"justify-content-end\">\r\n                <Link to=\"/login\" className=\"header-item-entrar\">Login</Link>\r\n            </Nav>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport const HeaderAdmin = () => {\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    return (\r\n        <Navbar className=\"header\" expanded={expanded}>\r\n            <Navbar.Toggle onClick={() => setExpanded(expanded ? false : \"expanded\")} />\r\n            <Link to=\"/\" className=\"header-titulo navbar-brand\">\r\n                <img src={logo} className=\"logo\" alt=\"\" />\r\n            </Link>\r\n            <Nav className=\"justify-content-start itens\">\r\n                <Link to=\"/aguai\" className=\"header-itens nav-link\">AGUAÍ</Link>\r\n                <Link to=\"/sao-paulo\" className=\"header-itens nav-link\">SÃO PAULO</Link>\r\n            </Nav>\r\n            <NavDropdown className=\"dropdown-menu-header\" title=\"OPÇÕES\" id=\"nav-dropdown\">\r\n                <LinkContainer to=\"/cadastro-setor\" className=\"dropdown-item\">\r\n                    <NavDropdown.Item>Cadastrar Setor</NavDropdown.Item>\r\n                </LinkContainer>\r\n                <LinkContainer to=\"/cadastro-ramal\" className=\"dropdown-item\">\r\n                    <NavDropdown.Item>Cadastrar Ramal</NavDropdown.Item>\r\n                </LinkContainer>\r\n                {/* <Link to=\"/cadastro-setor\" className=\"dropdown-item\" onClick={() => console.log(\"teste\")}></Link> */}\r\n                {/* <Link to=\"/cadastro-ramal\" className=\"dropdown-item\" onClick={() => setExpanded(false)}>Cadastrar Ramal</Link> */}\r\n                <LinkContainer to=\"/listar-setores\" className=\"dropdown-item\">\r\n                    <NavDropdown.Item>Editar Setores</NavDropdown.Item>\r\n                </LinkContainer>\r\n                {/* <Link to=\"/listar-setores\" className=\"dropdown-item\" onClick={() => setExpanded(false)}>Editar Setores</Link> */}\r\n                <NavDropdown.Divider />\r\n                <LinkContainer to=\"/logout\" className=\"dropdown-item\">\r\n                    <NavDropdown.Item>Sair</NavDropdown.Item>\r\n                </LinkContainer>\r\n                {/* <Link to=\"/logout\" className=\"dropdown-item\" onClick={() => setExpanded(false)}>Sair</Link> */}\r\n            </NavDropdown>\r\n        </Navbar>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { FaFacebook } from 'react-icons/fa';\r\nimport { FaYoutube } from 'react-icons/fa';\r\nimport { FaLinkedin } from 'react-icons/fa';\r\nimport { FaInstagram } from 'react-icons/fa';\r\n\r\nexport const Footer = () => {\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"footer-paragrafo\">Agenda Multiway 2020 - Todos os direitos reservados.</div>\r\n            <div className=\"icones-sociais\">\r\n                <a href=\"https://www.multiwayinfra.com.br/\" target=\"_blank\" rel=\"noopener noreferrer\"> <FaFacebook size=\"30\" color=\"#fff\" /></a>\r\n                <a href=\"https://www.youtube.com/user/Multiway2012/videos\" target=\"_blank\" rel=\"noopener noreferrer\"><FaYoutube size=\"30\" color=\"#fff\" /></a>\r\n                <a href=\"https://www.linkedin.com/company/multiway/\" target=\"_blank\" rel=\"noopener noreferrer\"><FaLinkedin size=\"30\" color=\"#fff\" /></a>\r\n                <a href=\"https://instagram.com/multiway_tl\" target=\"_blank\" rel=\"noopener noreferrer\"><FaInstagram size=\"30\" color=\"#fff\" /></a>\r\n            </div>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport { FcFullTrash } from \"react-icons/fc\";\r\nimport { FcEngineering } from \"react-icons/fc\";\r\nimport { Tooltip } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nclass ListarRamais extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            listaRamais: [],\r\n            isLoading: false,\r\n            cidadeId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('api/buscarRamais', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                cidadeId: 0\r\n            })\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                this.setState({ data: data, listaRamais: data, isLoading: false });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        let id = 0;\r\n\r\n        if (this.props.match.params.empresa === \"aguai\") {\r\n            id = 1;\r\n        } else if (this.props.match.params.empresa === \"sao-paulo\") {\r\n            id = 2;\r\n        } else {\r\n            id = 0;\r\n        }\r\n\r\n        let listaRamaisCidade = this.state.data;\r\n\r\n        if (id !== 0) {\r\n            listaRamaisCidade = this.state.data.filter(ramal => ramal.cidade_id === id);\r\n        }\r\n\r\n        if (prevState.cidadeId !== id) {\r\n            this.setState({ listaRamais: listaRamaisCidade, cidadeId: id });\r\n        }\r\n    }\r\n\r\n    pesquisar = event => {\r\n        let listaRamais = this.state.data;\r\n        if (this.state.cidadeId !== 0) {\r\n            listaRamais = this.state.data.filter(ramal => ramal.cidade_id === this.state.cidadeId);\r\n        }\r\n\r\n        //filtra no array de objetos todos os que no nome conter o que está sendo pesquisado, retorna um array novo com todos que batem com a busca.\r\n        const listaPesquisaNome = listaRamais.filter(pessoa => pessoa.nome.toLowerCase().indexOf(event.target.value.toLowerCase()) >= 0);\r\n        const listaPesquisaSetor = listaRamais.filter(pessoa => pessoa.setor.toLowerCase().indexOf(event.target.value.toLowerCase()) >= 0);\r\n        const listaPesquisa = [...listaPesquisaNome, ...listaPesquisaSetor];\r\n\r\n        this.setState({ listaRamais: listaPesquisa });\r\n    };\r\n\r\n    excluirRamal = ramalId => {\r\n        if (this.props.usuario.token === null) {\r\n            return;\r\n        }\r\n\r\n        const resposta = window.confirm(\"Tem certeza que deseja excluir este ramal?\");\r\n\r\n        if (resposta) {\r\n            fetch('/api/excluirRamal', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    ramalId: ramalId\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    alert(data.response);\r\n                    if (data.excluido) {\r\n                        this.setState({ listaRamais: this.state.listaRamais.filter(dado => dado.id !== ramalId) });\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { isLoading, listaRamais } = this.state;\r\n\r\n        const tooltipEditar = (props) => (\r\n            <Tooltip id=\"button-editar\" {...props}>\r\n                Editar\r\n            </Tooltip>\r\n\r\n        );\r\n        const tooltipExcluir = (props) => (\r\n            <Tooltip id=\"button-excluir\" {...props}>\r\n                Excluir\r\n            </Tooltip>\r\n\r\n        );\r\n\r\n        if (isLoading) {\r\n            return (\r\n                <div className=\"loading_container\">\r\n                    <Spinner animation=\"border\" role=\"status\" className=\"loading\" variant=\"success\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"tela\">\r\n                <div className=\"container\">\r\n                    <div className=\"titulo\">\r\n                        <h2>Lista de Ramais</h2>\r\n                        <FormControl placeholder=\"Pesquisar por nome ou setor\" onChange={this.pesquisar.bind(this)} />\r\n                    </div>\r\n                    <Table striped bordered hover responsive className=\"tabela-ramais\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Nome</th>\r\n                                <th>Ramal</th>\r\n                                <th>Telefone</th>\r\n                                <th>Email</th>\r\n                                <th>Setor</th>\r\n                                <th>Cidade</th>\r\n                                {this.props.usuario.token !== null && <th>Opções</th>}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {listaRamais.map((dados, index) =>\r\n                                <tr key={index}>\r\n                                    <td>{index + 1}</td>\r\n                                    <td>{dados.nome}</td>\r\n                                    <td>{dados.ramal}</td>\r\n                                    <td>{dados.telefone}</td>\r\n                                    <td>{dados.email}</td>\r\n                                    <td>{dados.setor}</td>\r\n                                    <td>{dados.nome_cidade}</td>\r\n                                    {this.props.usuario.token !== null &&\r\n                                        <td className=\"tabela-td-opcoes\">\r\n                                            <OverlayTrigger\r\n                                                placement=\"top\"\r\n                                                delay={{ show: 250, hide: 200 }}\r\n                                                overlay={tooltipEditar}\r\n                                            >\r\n                                                <Link to={`/editar-ramal/${dados.id}`}><FcEngineering size=\"25\"></FcEngineering></Link>\r\n                                            </OverlayTrigger>\r\n                                            <OverlayTrigger\r\n                                                placement=\"top\"\r\n                                                delay={{ show: 250, hide: 200 }}\r\n                                                overlay={tooltipExcluir}\r\n                                            >\r\n                                                <Button className=\"btn-excluir\" variant=\"link\" onClick={this.excluirRamal.bind(this, dados.id)}><FcFullTrash size=\"25\"></FcFullTrash></Button>\r\n                                            </OverlayTrigger>\r\n                                        </td>}\r\n                                </tr>)}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        usuario: state.usuario\r\n    };\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onMudarEmpresa: () => dispatch({ type: actionTypes.MUDAR_EMPRESA, payload: 2 })\r\n//     };\r\n// };\r\n\r\nexport default connect(mapStateToProps)(ListarRamais);\r\n// export default ListarRamais;","import React from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport InputMask from 'react-input-mask';\r\n\r\nclass CadastroRamal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            listaCidades: [],\r\n            listaSetores: [],\r\n            nomePessoa: '',\r\n            numeroRamal: '',\r\n            numeroTelefone: '',\r\n            setorId: '',\r\n            cidadeId: '',\r\n            email: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/api/buscarCidades', {\r\n            method: 'GET',\r\n        })\r\n            .then(result => result.json())\r\n            .then(listaCidades => {\r\n                this.setState({ listaCidades: listaCidades });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    salvarRamal = () => {\r\n\r\n        fetch('/api/salvarRamal', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                nomePessoa: this.state.nomePessoa,\r\n                numeroRamal: this.state.numeroRamal,\r\n                numeroTelefone: this.state.numeroTelefone,\r\n                setorId: this.state.setorId,\r\n                email: this.state.email,\r\n                acao: 1 // - salvar\r\n            })\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw Error(response.statusText);\r\n                }\r\n                response.json();\r\n            })\r\n            .then(() => {\r\n                document.getElementsByClassName('alert-sucesso')[0].style.display = 'block';\r\n                this.setState({\r\n                    nomePessoa: '',\r\n                    numeroRamal: '',\r\n                    numeroTelefone: '',\r\n                    setorId: '',\r\n                    email: ''\r\n                });\r\n            })\r\n            .catch(() => document.getElementsByClassName('alert-erro')[0].style.display = 'block');\r\n    };\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ [target.name]: target.value });\r\n\r\n        if (target.name === \"cidadeId\" && target.value > 0) {\r\n            document.getElementsByName('setorId')[0].children[0].innerHTML = \"Carregando...\";\r\n            fetch('/api/buscarSetores', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    cidadeId: target.value\r\n                })\r\n            })\r\n                .then(result => result.json())\r\n                .then(listaSetores => {\r\n                    document.getElementsByName('setorId')[0].children[0].innerHTML = \"Selecione...\";\r\n                    this.setState({ listaSetores: listaSetores });\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n        if (target.name === \"cidadeId\" && target.value <= 0) {\r\n            this.setState({ listaSetores: [] });\r\n        }\r\n    };\r\n\r\n    esconderErro = visibility => {\r\n        console.log(visibility);\r\n        if (visibility) {\r\n            document.getElementsByClassName('alert-erro')[0].style.display = 'none'\r\n        }\r\n    };\r\n\r\n    esconderSucesso = visibility => {\r\n        if (visibility) {\r\n            document.getElementsByClassName('alert-sucesso')[0].style.display = 'none'\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        const { listaCidades, listaSetores } = this.state;\r\n\r\n        return (\r\n            <div className=\"tela\">\r\n                <div className=\"container\">\r\n                    <div className=\"titulo\">\r\n                        <h2>Cadastro Ramal</h2>\r\n                    </div>\r\n                    <Form.Group controlId=\"formCadastroPessoa\">\r\n                        <Form.Label>Nome:</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Digite o nome\" name=\"nomePessoa\" value={this.state.nomePessoa} onChange={this.handleChange} required />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroRamal\">\r\n                        <Form.Label>Ramal:</Form.Label>\r\n                        <InputMask className=\"form-control\" placeholder=\"Digite o número do ramal\" mask=\"999\" type=\"text\" name=\"numeroRamal\" value={this.state.numeroRamal} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroTelefone\">\r\n                        <Form.Label>Telefone:</Form.Label>\r\n                        <InputMask className=\"form-control\" placeholder=\"Digite o número do telefone\" mask=\"(99) 99999-9999\" type=\"text\" name=\"numeroTelefone\" value={this.state.numeroTelefone} onChange={this.handleChange} />                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroEmail\">\r\n                        <Form.Label>Email:</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Digite o email\" name=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroCidade\">\r\n                        <Form.Label>Cidade:</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"cidadeId\" value={this.state.cidadeId} onChange={this.handleChange} required>\r\n                            <option value=\"\">Selecione</option>\r\n                            {listaCidades.map(cidade => <option key={cidade.id} value={cidade.id}>{cidade.nome}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroSetor\">\r\n                        <Form.Label>Setor:</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"setorId\" value={this.state.setorId} onChange={this.handleChange} required>\r\n                            <option value=\"\">Selecione</option>\r\n                            {listaSetores.map(setor => <option key={setor.id} value={setor.id}>{setor.nome}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <div className=\"alert-erro\">\r\n                        <Alert variant='danger' onClose={() => this.esconderErro(true)} dismissible>Alguma coisa deu errada ao salvar suas informações!</Alert>\r\n                    </div>\r\n                    <div className=\"alert-sucesso\">\r\n                        <Alert variant='success' onClose={() => this.esconderSucesso(true)} dismissible>Salvo com sucesso!</Alert>\r\n                    </div>\r\n                    <Button className=\"botoes-cor\" variant=\"primary\" type=\"button\" onClick={this.salvarRamal}>Salvar</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default CadastroRamal;","import React from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nclass CadastroSetor extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            nomeSetor: '',\r\n            cidadeId: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/api/buscarCidades', {\r\n            method: 'GET',\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                this.setState({ data });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ [target.name]: target.value });\r\n    };\r\n\r\n    salvarSetor = () => {\r\n\r\n        fetch('/api/salvarSetor', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                nomeSetor: this.state.nomeSetor,\r\n                cidadeId: this.state.cidadeId\r\n            })\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw Error(response.statusText);\r\n                }\r\n\r\n                response.json();\r\n            })\r\n            .then(() => {\r\n                document.getElementsByClassName('alert-sucesso')[0].style.display = 'block';\r\n                this.setState({\r\n                    nomePessoa: '',\r\n                    numeroRamal: '',\r\n                    numeroTelefone: '',\r\n                    cidadeId: ''\r\n                });\r\n            })\r\n            .catch(() => document.getElementsByClassName('alert-erro')[0].style.display = 'block');\r\n    };\r\n\r\n    esconderErro = () => {\r\n        document.getElementsByClassName('alert-erro')[0].style.display = 'none'\r\n    };\r\n\r\n    esconderSucesso = () => {\r\n        document.getElementsByClassName('alert-sucesso')[0].style.display = 'none'\r\n    };\r\n\r\n    render() {\r\n\r\n        const { data } = this.state;\r\n\r\n        return (\r\n            <div className=\"tela\">\r\n                {/* <HeaderAdmin /> */}\r\n                <div className=\"container\">\r\n                    <div className=\"titulo\">\r\n                        <h2>Cadastro Setor</h2>\r\n                    </div>\r\n                    <Form.Group controlId=\"formCadastroSetor\">\r\n                        <Form.Label>Setor:</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Digite o nome do setor\" name=\"nomeSetor\" value={this.state.nomeSetor} onChange={this.handleChange} required />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroLocal\">\r\n                        <Form.Label>Empresa:</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"cidadeId\" value={this.state.cidadeId} onChange={this.handleChange.bind(this)} required>\r\n                            <option value=\"\">Selecione</option>\r\n                            {data.map(dado => <option key={dado.id} value={dado.id}>{dado.nome}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <div className=\"alert-erro\">\r\n                        <Alert variant='danger' onClose={() => this.esconderErro()} dismissible>Alguma coisa deu errada ao salvar suas informações!</Alert>\r\n                    </div>\r\n                    <div className=\"alert-sucesso\">\r\n                        <Alert variant='success' onClose={() => this.esconderSucesso()} dismissible>Salvo com sucesso!</Alert>\r\n                    </div>\r\n                    <Button className=\"botoes-cor\" variant=\"primary\" type=\"button\" onClick={this.salvarSetor} >Salvar</Button>\r\n                </div>\r\n                {/* <Footer /> */}\r\n            </div >\r\n\r\n        )\r\n    }\r\n};\r\n\r\nexport default CadastroSetor;","import React from 'react';\r\nimport { FcFullTrash } from \"react-icons/fc\";\r\nimport { FcEngineering } from \"react-icons/fc\";\r\n\r\nimport Table from 'react-bootstrap/Table';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { Tooltip } from 'react-bootstrap';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass CadastroSetor extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            nomeSetor: '',\r\n            idLocal: '',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n\r\n        fetch('/api/buscarSetores', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                cidadeId: 0 // 0 - todos os sertores\r\n            })\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => this.setState({ data, isLoading: false }))\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    excluirSetor = setorId => {\r\n        if (this.props.usuario.token === null) {\r\n            return;\r\n        }\r\n\r\n        const resposta = window.confirm(\"Tem certeza que deseja excluir este setor?\");\r\n\r\n        if (resposta) {\r\n            fetch('/api/excluirSetor', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    setorId: setorId\r\n                })\r\n            })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    alert(data.response);\r\n                    if (data.excluido) {\r\n                        this.setState({ data: this.state.data.filter(dado => dado.id !== setorId) });\r\n                    }\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        const { data, isLoading } = this.state;\r\n\r\n        const tooltipEditar = (props) => (\r\n            <Tooltip id=\"button-editar\" {...props}>\r\n                Editar\r\n            </Tooltip>\r\n\r\n        );\r\n        const tooltipExcluir = (props) => (\r\n            <Tooltip id=\"button-excluir\" {...props}>\r\n                Excluir\r\n            </Tooltip>\r\n\r\n        );\r\n\r\n        if (isLoading) {\r\n            return (\r\n                <div className=\"loading_container\">\r\n                    <Spinner animation=\"border\" role=\"status\" className=\"loading\" variant=\"success\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"tela\">\r\n                <div className=\"container\">\r\n                    <div className=\"titulo\">\r\n                        <h2>Editar Setor</h2>\r\n                    </div>\r\n                    <Table striped bordered hover responsive className=\"tabela-setores\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>#</th>\r\n                                <th>Nome Setor</th>\r\n                                <th>Cidade</th>\r\n                                <th>Opções</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {data.map((dados, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{dados.nome}</td>\r\n                                        <td>{dados.nome_cidade}</td>\r\n                                        <td>\r\n                                            <OverlayTrigger\r\n                                                placement=\"top\"\r\n                                                delay={{ show: 250, hide: 200 }}\r\n                                                overlay={tooltipEditar}\r\n                                            >\r\n                                                <Link to={`/editar-setor/${dados.id}`}><FcEngineering size=\"25\"></FcEngineering></Link>\r\n                                            </OverlayTrigger>\r\n                                            <OverlayTrigger\r\n                                                placement=\"top\"\r\n                                                delay={{ show: 250, hide: 200 }}\r\n                                                overlay={tooltipExcluir}\r\n                                            >\r\n                                                <Button variant=\"link\" onClick={this.excluirSetor.bind(this, dados.id)}><FcFullTrash size=\"25\"></FcFullTrash></Button>\r\n                                            </OverlayTrigger>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </div>\r\n            </div >\r\n\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        usuario: state.usuario\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps)(CadastroSetor);","import React from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nclass EditarSetor extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            nomeSetor: '',\r\n            localId: '',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.setState({ isLoading: true });\r\n\r\n        //BUSCA AS CIDADES PARA SER EXIBIDO NO SELECT EMPRESA\r\n        fetch('/api/buscarCidades', {\r\n            method: 'GET',\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                this.setState({ data: data, isLoading: false });\r\n            })\r\n            .catch(err => console.log(err));\r\n\r\n        // BUSCA OS DADOS DO SETOR ESCOLHIDO PELO ID\r\n        fetch('/api/buscarSetor', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                setorId: this.props.match.params.setorId\r\n            })\r\n        })\r\n            .then(result => result.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    nomeSetor: data[0].nome,\r\n                    cidadeId: data[0].cidade_id\r\n                });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    // ALTERA OS STADOS DAS VARIÁVEIS BASEADO NO ONCHANGE. A CADA LETRA DIGITADA SERÁ ALTERADO O VALOR.\r\n    handleChange = ({ target }) => {\r\n        this.setState({ [target.name]: target.value });\r\n    };\r\n\r\n    //FAZ UMA REQUISIÇÃO PARA NOSSO SERVER PARA SALVAR O SETOR NO BANCO DE DADOS.\r\n    salvarSetor = () => {\r\n        // document.getElementsByClassName('botao-salvar').firstChild.text.data = \"salvando\";\r\n        document.querySelector('.botao-salvar').innerHTML = \"Salvando...\";\r\n\r\n        fetch('/api/atualizarSetor', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                nomeSetor: this.state.nomeSetor,\r\n                cidadeId: this.state.cidadeId,\r\n                setorId: this.props.match.params.setorId\r\n            })\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw Error(response.statusText);\r\n                }\r\n                response.json();\r\n            })\r\n            .then(() => {\r\n                document.querySelector('.botao-salvar').innerHTML = \"Salvar\";\r\n                document.getElementsByClassName('alert-sucesso')[0].style.display = 'block'\r\n            })\r\n            .catch(() => document.getElementsByClassName('alert-erro')[0].style.display = 'block');\r\n    };\r\n\r\n    //CHAMADO NO onClose DO ALERT PARA FECHAR O ALERT DE ERRO.\r\n    esconderErro = visibility => {\r\n        if (visibility) {\r\n            document.getElementsByClassName('alert-erro')[0].style.display = 'none'\r\n        }\r\n    };\r\n\r\n    //CHAMADO NO onClose DO ALERT PARA FECHAR O ALERT DE SUCESSO.\r\n    esconderSucesso = visibility => {\r\n        if (visibility) {\r\n            document.getElementsByClassName('alert-sucesso')[0].style.display = 'none'\r\n        }\r\n    };\r\n\r\n    //RENDERIZA A TELA USANDO JSX\r\n    render() {\r\n\r\n        // const { data, isLoading } = this.state\r\n\r\n        var dados = this.state.data;\r\n        var carregando = this.state.isLoading;\r\n\r\n        if (carregando) {\r\n            return (\r\n                <div className=\"loading_container\">\r\n                    <Spinner animation=\"border\" role=\"status\" className=\"loading\" variant=\"success\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"tela\">\r\n                {/* <HeaderAdmin /> */}\r\n                <div className=\"container\">\r\n                    <div className=\"titulo\">\r\n                        <h2>Editar Setor</h2>\r\n                    </div>\r\n                    <Form.Group controlId=\"formCadastroSetor\">\r\n                        <Form.Label>Setor:</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Digite o nome do setor\" name=\"nomeSetor\" value={this.state.nomeSetor} onChange={this.handleChange} required />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroLocal\">\r\n                        <Form.Label>Empresa:</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"cidadeId\" value={this.state.cidadeId} onChange={this.handleChange.bind(this)} required>\r\n                            <option value=\"\">Selecione</option>\r\n                            {dados.map(dado => <option key={dado.id} value={dado.id}>{dado.nome}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <div className=\"alert-erro\">\r\n                        <Alert variant='danger' onClose={() => this.esconderErro(true)} dismissible>Alguma coisa deu errada ao salvar suas informações!</Alert>\r\n                    </div>\r\n                    <div className=\"alert-sucesso\">\r\n                        <Alert variant='success' onClose={() => this.esconderSucesso(true)} dismissible>Salvo com sucesso!</Alert>\r\n                    </div>\r\n                    <Button className=\"botoes-cor botao-salvar\" type=\"button\" onClick={this.salvarSetor} >Salvar</Button>\r\n                </div>\r\n                {/* <Footer /> */}\r\n            </div >\r\n\r\n        )\r\n    }\r\n};\r\n\r\nexport default EditarSetor;","import React from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport InputMask from 'react-input-mask';\r\n\r\nclass EditarRamal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            listaSetores: [],\r\n            listaCidades: [],\r\n            nomePessoa: '',\r\n            numeroRamal: '',\r\n            numeroTelefone: '',\r\n            setorId: '',\r\n            cidadeId: '',\r\n            email: '',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    //chamado após o render da tela. Recomendado pelo react para carregar dados na tela.\r\n    //Esta no modo sync ou seja, cada chamada no fetch irá esperar (await) a busca terminar parar executar o código abaixo. \r\n    //o motivo de eu ter feito essa busca diferente do EditarSetor é que eu preciso que o dropdown da cidade e do setor estejam \r\n    //populados antes de setar os valores, caso contrário não irá funcionar de deixar selecionado.\r\n    async componentDidMount() {\r\n        this.setState({ isLoading: true });\r\n\r\n        try {\r\n            //busca no banco de dados todas as cidades para ser listado no dropdown \"cidades\"\r\n            const responseCidades = await fetch('/api/buscarCidades', {\r\n                method: 'GET',\r\n            });\r\n\r\n            //resultado da busca sendo convertido para json;\r\n            const listaCidades = await responseCidades.json();\r\n\r\n            // busca o ramal escolhido pelo id. id -> vem da tela de listar ramais via GET.\r\n            const responseRamal = await fetch('/api/buscarRamal', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    ramalId: this.props.match.params.ramalId\r\n                })\r\n            })\r\n\r\n            //resultado da busca sendo convertido para json.\r\n            const dadosRamal = await responseRamal.json();\r\n\r\n            //busca todos os setores que pertecem a cidade escolhida.\r\n            const responseSetores = await fetch('/api/buscarSetores', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    cidadeId: dadosRamal[0].cidade_id,\r\n                })\r\n            });\r\n\r\n            //resultado da busca sendo convertido para json.\r\n            const listaSetores = await responseSetores.json();\r\n\r\n            //Após as 3 consultas terminarem os valores são setados para exibir em modo de edição. É preciso todas as etapas antes porque\r\n            //na base salvamos o id do setor, precisamos dele antes pra poder listar perfeitamente.\r\n            this.setState({\r\n                listaCidades: listaCidades,\r\n                listaSetores: listaSetores,\r\n                nomePessoa: dadosRamal[0].nome_pessoa,\r\n                numeroRamal: dadosRamal[0].ramal,\r\n                numeroTelefone: dadosRamal[0].telefone,\r\n                cidadeId: dadosRamal[0].cidade_id,\r\n                setorId: dadosRamal[0].setor_id,\r\n                email: dadosRamal[0].email\r\n            });\r\n\r\n            //estou deixando o código que remove o loading dentro do try pra caso der erro ele continuar no loading infinito indicando um problema.\r\n            this.setState({ isLoading: false });\r\n        } catch (err) {\r\n            console.log(\"Erro ao buscar suas informações. \" + err);\r\n        }\r\n    }\r\n\r\n    salvarRamal = () => {\r\n\r\n        fetch('/api/salvarRamal', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                nomePessoa: this.state.nomePessoa,\r\n                numeroRamal: this.state.numeroRamal,\r\n                numeroTelefone: this.state.numeroTelefone,\r\n                setorId: this.state.setorId,\r\n                ramalId: this.props.match.params.ramalId,\r\n                email: this.state.email,\r\n                acao: 2 // - atualizar\r\n            })\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw Error(response.statusText);\r\n                }\r\n\r\n                response.json();\r\n            })\r\n            .then(() => document.getElementsByClassName('alert-sucesso')[0].style.display = 'block')\r\n            .catch(() => document.getElementsByClassName('alert-erro')[0].style.display = 'block');\r\n    };\r\n\r\n    //Chamado a cada botão pressionado nos inputs. Ele recebe um target.name que representa o nome do input que está sendo digitado no momento.\r\n    //E recebe também um value que é o valor que está no input.\r\n    handleChange = ({ target }) => {\r\n        this.setState({ [target.name]: target.value });\r\n\r\n        //utilizado para verificar se o dropdown da cidade foi alterado, caso sim, ele deverá recarregar o dropdown do setor com os setores da cidade escolhida.\r\n        if (target.name === \"cidadeId\" && target.value > 0) {\r\n            document.getElementsByName('setorId')[0].children[0].innerHTML = \"Carregando...\";\r\n\r\n            fetch('/api/buscarSetores', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    cidadeId: target.value\r\n                })\r\n            })\r\n                .then(result => result.json())\r\n                .then(listaSetores => {\r\n                    document.getElementsByName('setorId')[0].children[0].innerHTML = \"Selecione...\";\r\n                    this.setState({ listaSetores: listaSetores });\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n\r\n        //caso o dropdown da cidade <= 0 ou seja estiver no selecione, o dropdown do setor não pode ter valores cadastrados, então caso for <= 0 ele limpa os dados do setor. \r\n        if (target.name === \"cidadeId\" && target.value <= 0) {\r\n            this.setState({ listaSetores: [], setorId: '' });\r\n        }\r\n    };\r\n\r\n    esconderErro = () => {\r\n        document.getElementsByClassName('alert-erro')[0].style.display = 'none';\r\n    };\r\n\r\n    esconderSucesso = () => {\r\n        document.getElementsByClassName('alert-sucesso')[0].style.display = 'none';\r\n    };\r\n\r\n    render() {\r\n\r\n        const { isLoading, listaCidades, listaSetores } = this.state;\r\n\r\n        if (isLoading) {\r\n            return (\r\n                <div className=\"loading_container\">\r\n                    <Spinner animation=\"border\" role=\"status\" className=\"loading\" variant=\"success\">\r\n                        <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"tela\">\r\n                <div className=\"container\">\r\n                    <div className=\"titulo\">\r\n                        <h2>Editar Ramal</h2>\r\n                    </div>\r\n                    <Form.Group controlId=\"formCadastroPessoa\">\r\n                        <Form.Label>Nome:</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Digite o nome\" name=\"nomePessoa\" value={this.state.nomePessoa !== null ? this.state.nomePessoa : \"\"} onChange={this.handleChange} required />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroRamal\">\r\n                        <Form.Label>Ramal:</Form.Label>\r\n                        <InputMask className=\"form-control\" placeholder=\"Digite o número do ramal\" mask=\"999\" type=\"text\" name=\"numeroRamal\" value={this.state.numeroRamal} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroTelefone\">\r\n                        <Form.Label>Telefone:</Form.Label>\r\n                        <InputMask className=\"form-control\" placeholder=\"Digite o número do telefone\" mask=\"(99) 99999-9999\" type=\"text\" name=\"numeroTelefone\" value={this.state.numeroTelefone} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroEmail\">\r\n                        <Form.Label>Email:</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Digite o email\" name=\"email\" value={this.state.email !== null ? this.state.email : \"\"} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroCidade\">\r\n                        <Form.Label>Cidade:</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"cidadeId\" value={this.state.cidadeId} onChange={this.handleChange} required>\r\n                            <option value=\"\">Selecione</option>\r\n                            {listaCidades.map(cidade => <option key={cidade.id} value={cidade.id}>{cidade.nome}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formCadastroSetor\">\r\n                        <Form.Label>Setor:</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"setorId\" value={this.state.setorId} onChange={this.handleChange} required>\r\n                            <option value=\"\">Selecione</option>\r\n                            {listaSetores.map(setor => <option key={setor.id} value={setor.id}>{setor.nome}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <div className=\"alert-erro\">\r\n                        <Alert variant='danger' onClose={() => this.esconderErro()} dismissible>Alguma coisa deu errada ao salvar suas informações!</Alert>\r\n                    </div>\r\n                    <div className=\"alert-sucesso\">\r\n                        <Alert variant='success' onClose={() => this.esconderSucesso()} dismissible>Salvo com sucesso!</Alert>\r\n                    </div>\r\n                    <Button className=\"botoes-cor\" variant=\"primary\" type=\"button\" onClick={this.salvarRamal}>Salvar</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default EditarRamal;","import React from 'react';\r\nimport { Button, Form, Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../store/actionTypes';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            usuario: '',\r\n            senha: '',\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        this.setState({ [target.name]: target.value });\r\n    };\r\n\r\n    logar = () => {\r\n        fetch('/api/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                usuario: this.state.usuario,\r\n                senha: this.state.senha\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(({ autenticado, token }) => {\r\n                if (autenticado) {\r\n                    this.props.onLogin(this.state.usuario, token);\r\n\r\n                } else {\r\n                    document.getElementsByClassName('alert-erro-login')[0].style.display = 'block';\r\n                }\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    esconderErro = () => {\r\n        document.getElementsByClassName('alert-erro-login')[0].style.display = 'none'\r\n    };\r\n\r\n    render() {\r\n\r\n        if (this.props.usuario.token) {\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"container-login\">\r\n                <div className=\"container-forms-login\">\r\n                    <Form.Group>\r\n                        <Form.Label>Usuário</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Digite seu usuário\" name=\"usuario\" value={this.state.usuario} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Senha</Form.Label>\r\n                        <Form.Control type=\"password\" placeholder=\"Digite sua senha\" name=\"senha\" value={this.state.senha} onChange={this.handleChange} />\r\n                    </Form.Group>\r\n                    <Button className=\"botoes-cor\" onClick={this.logar}><span>Entrar</span></Button>\r\n                    <div className=\"alert-erro-login\">\r\n                        <Alert variant='danger' onClose={() => this.esconderErro(true)} dismissible>Usuário ou senha incorretos!</Alert>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        usuario: state.usuario\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLogin: (usuario, token) => dispatch({ type: actionTypes.LOGIN, payload: { usuario: { usuario: usuario, token: token } } })\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","export const MUDAR_EMPRESA = 'MUDAR_EMPRESA';\r\nexport const LOGIN = 'LOGIN';\r\nexport const LOGOUT = 'LOGOUT';","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../store/actionTypes';\r\n\r\nclass Logout extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onLogout();\r\n    }\r\n    \r\n    render() {\r\n        return null\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLogout: () => dispatch({ type: actionTypes.LOGOUT })\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Logout);","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { HeaderAdmin, Header } from './components/Header';\r\nimport Footer from './components/Footer';\r\n\r\nimport ListarRamais from './screens/ListarRamais';\r\nimport CadastroRamal from './screens/CadastroRamal';\r\nimport CadastroSetor from './screens/CadastroSetor';\r\nimport ListarSetores from './screens/ListarSetores';\r\nimport EditarSetor from './screens/EditarSetor';\r\nimport EditarRamal from './screens/EditarRamal';\r\nimport Login from './screens/Login';\r\nimport Logout from './screens/Logout';\r\n\r\nconst PrivateRoute = props => {\r\n  const { usuario, component, path } = props;\r\n\r\n  if (usuario.token === null) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n  return <Route path={path} component={component} />;\r\n};\r\n\r\nfunction App({ location }) {\r\n  const usuario = useSelector(state => state.usuario);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {usuario.token === null ? < Header /> : <HeaderAdmin />}\r\n      <Switch>\r\n        <PrivateRoute path=\"/cadastro-ramal\" component={CadastroRamal} usuario={usuario} />\r\n        <PrivateRoute path=\"/cadastro-setor\" component={CadastroSetor} usuario={usuario} />\r\n        <PrivateRoute path=\"/listar-setores\" component={ListarSetores} usuario={usuario} />\r\n        <PrivateRoute path=\"/cadastro-ramal\" component={ListarSetores} usuario={usuario} />\r\n        <PrivateRoute path=\"/editar-setor/:setorId\" component={EditarSetor} usuario={usuario} />\r\n        <PrivateRoute path=\"/editar-ramal/:ramalId\" component={EditarRamal} usuario={usuario} />\r\n        <PrivateRoute path=\"/logout\" component={Logout} usuario={usuario} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/:empresa\" component={ListarRamais} />\r\n        <Route path=\"/\" exact component={ListarRamais} />\r\n      </Switch>\r\n      <Footer />\r\n      {/* {location.pathname !== '/login' && <Footer />} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as actionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    empresaId: 1,\r\n    usuario: {\r\n        usuario: null,\r\n        token: null\r\n    }\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.MUDAR_EMPRESA:\r\n            return {\r\n                ...state,\r\n                empresaId: action.payload\r\n            }\r\n        case actionTypes.LOGIN:\r\n            return {\r\n                ...state,\r\n                usuario: action.payload.usuario,\r\n                senha: action.payload.senha\r\n            }\r\n        case actionTypes.LOGOUT:\r\n            return {\r\n                ...state,\r\n                usuario: {\r\n                    usuario: null,\r\n                    token: null\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport { createStore } from '@reduxjs/toolkit';\r\nimport reducer from './store/reducer';\r\nimport { Provider } from 'react-redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\n// const store = createStore(reducer);\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer);\r\n\r\nlet store = createStore(persistedReducer);\r\nlet persistor = persistStore(store);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}